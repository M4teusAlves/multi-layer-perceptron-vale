package br.com.mateusaugusto;

import java.util.Random;

public class NeuralNetwork {
    // Mesma estrutura da rede com mais neur√¥nios na camada oculta
    private int tamanhoEntrada;
    private int tamanhoOculto;
    private int tamanhoSaida;
    public double[][] pesosEntradaOculta;
    public double[][] pesosOcultaSaida;
    private double taxaAprendizagem = 0.01;

    public NeuralNetwork(int tamanhoEntrada, int tamanhoOculto, int tamanhoSaida) {
        this.tamanhoEntrada = tamanhoEntrada;
        this.tamanhoOculto = tamanhoOculto;
        this.tamanhoSaida = tamanhoSaida;

        pesosEntradaOculta = new double[tamanhoEntrada][tamanhoOculto];
        pesosOcultaSaida = new double[tamanhoOculto][tamanhoSaida];
        inicializarPesos();
    }

    private void inicializarPesos() {

        double[] pesos1 = { -0.3474415680466366, 0.024540390734314133, 0.29130580262309, 0.3081342800125687, -0.09193165007057502, 0.049175305243178036, -0.12760507961379153, -0.024113411874211788, 0.47431068184305103, 0.1244454194079665, -0.30305512729579753, -0.38327645202382166, -0.02120632502134212, -0.09093239298218936, 0.14108288874314923, -0.3740059388695023, 0.4562362795106578, -0.46576406058352327, -0.4020753941448536, -0.4771449037664246, 0.09879401425307477, -0.35708880112565966, 0.37160310233170235, 0.2248750546039897, 0.26161101691145316, -0.12637725435068858, 0.19675642300655793, 0.1701189207937942, 0.007176212109086921, 0.2570749764167968, 0.3822838411974562, 0.11487059746201411, 0.2229378151489778, 0.34638976256436504, 0.09478191508069234, 0.17831216215588186, -0.12114278706756965, 0.28560502628575246, 0.09492342796953657, -0.020106550111218424, 0.3050595528011898, 0.43608907335484526, 0.31914371727500046, -0.4792100756284322, 0.46446524288962043, -0.37318081268543046, 0.059350322013680845, -0.20223947614040005, 0.07126268276210046, -0.4279882821892512, 0.13497371592392027, 0.005881053199308872, 0.06330977821488426, -0.4916192823655263, 0.37452836769788456, -0.413956468443087, 0.37502761594374656, -0.35565946429133943, -0.0720453694550156, 0.30377495367437635, 0.17707670492315675, -0.41524294414781227, 0.4163640086491729, 0.007843802306021552, -0.24991735632982093, 0.4973915747074781, -0.30758841635523415, -0.2897138579074462, -0.05809527906285383, 0.4209701151839872, 0.032371061710118054, 0.15389776372502373, -0.2785829432666509, -0.220150025494659, -0.08991051517607274, 0.088902217851343, -0.3135005921292011, -0.1334554319435144, 0.11334998913352567, 0.06741922888093443, -0.4900898937172984, -0.21909319101753288, -0.14522701668207416, -0.31747814671130437, 0.21394117991936157, 0.07355971814240414, -0.2977626851220244, -0.1719153799319303, -0.1467681107985498, 0.13120298434968913, -0.39209538565303603, -0.263710879737478, -0.3451568428812418, 0.16271206554214834, 0.050281862772319164, 0.2615677552883936, -0.08432742782665381, 0.49748668247797334, 0.32035807967625207, 0.12292998420119106, -0.010484345287779195, -0.20870603908623298, 0.280703827490268, -0.408970081732017, -0.4904440448634705, -0.3501098282427658, -0.4944777792950513, 0.41199775375485004, -0.413206984488074, 0.12699538720689219, -0.43000693446946836, -0.40302797564617854, 0.10089376597653121, -0.46926724966879485, 0.39885257233078064, 0.0744333540306833, 0.35717948444415404, -0.018565474426443962, 0.007002743803510847, 0.10185461057565814, 0.3219370671346252, 0.2037555770014572, -0.3309536684198108, -0.23615331744928525, 0.3679699937267572, 0.10732358531793884, -0.46000536383754453, -0.15410769424505, -0.0367193332052983, -0.187304763396289, 0.01599699595165449, -0.13407430177376434, 0.018002535515710516, -0.08682381224270497, -0.32820760825539086, 0.07042872501246211, -0.3318227792013383, -0.07189854012659314, 0.44068525797068614, -0.24262111591072655, 0.11969784890849944, 0.09946255288811123, -0.18680104629846006, 0.37529840730364006, -0.19828308949707407, -0.0886938648236788, 0.2221620309245198, 0.4658178607350546, 0.48604320989982996, -0.0298814373370917, 0.4548342659196639, -0.33341847573350814, 0.2175291517580582, 0.174449233286872, -0.11321993438486222, -0.3280139033103211, -0.12982382216271815, 0.42331519564090025, -0.4324501290067435, 0.2611581652756091, -0.10533745940093742, 0.4654681492905489, -0.2951697061310239, 0.24574011267734974, 0.3552246622892984, -0.12460563043498285, -0.10842376842284662, 0.4644680089434505, -0.3327008593489321, -0.4430432541052155, 0.49973936609251446, -0.24281068773410697, -0.4579402475309984, -0.37812233572323384, 0.024559236820403174, 0.18788195499452043, -0.4800402127754677, -0.032199852260713424, -0.19501575705936958, -0.3455991566845119, 0.13261721864080678, 0.3894538795650492, 0.4686421655923304, 0.4220916385122718, 0.17085599901462512, -0.4035082129430164, -0.3461194904474094, 0.04907555565411925, -0.24355582019260724, 0.08285198231679824, 0.04674935213543374, -0.36707650265808256, -0.08395462645540752, 0.3950387428260249, -0.4625996307198923, 0.3016014519540908, 0.13812716747896603, -0.01949447577458152, 0.34822757998741705, 0.395983202890267, -0.042953637258432265, 0.46236177690643787, 0.315176754394338, -0.15310916120585538, -0.046742315058397876, -0.1170852508512299, 0.11400193409451775, -0.16346298665293368, -0.3154311944042655, 0.18609616145594898, 0.11484960755379447, -0.047592566679508286, -0.029408292106557488, -0.032387178450029364, -0.2785983026258244, -0.30896387966072303, -0.35898369944418207, 0.3116997234703125, -0.4950891018200776, 0.34978953563375115, 0.3280592035137865, 0.3546422386505541, 0.17881323771604185, 0.05669045118522498, 0.13441705538213267, 0.0677742826990404, 0.4762041071473455, -0.06852414240876814, 0.040280106383276504, -0.3635523583375684, 0.29031561324040533, 0.1454978412978637, -0.2735610530671243, -0.2734934115930884, 0.017235094112817873, -0.046260187322252344, 0.08524279106731303, -0.12390832267594165, -0.09954459778122127, -0.39086480463372786, 0.06714551056127771, 0.22813519200247456, 0.3184500436369876, 0.43753895449194924, -0.33219867668129444, -0.17230049329094088, 0.379316939961138, 0.2511175593152165, -0.20085129664198853, -0.2516504080280798, -0.1093630500624111, -0.2914145644434126, -0.49235189659359835, 0.3830388435007187, -0.24195586620156717, 0.19263174402363392, -0.49618489123759346, 0.3375275293459945, 0.13260693992519956, 0.26804403243866115, 0.24941752042462584, 0.4981413347674263, 0.1749704035433084, -0.19154980816612843, -0.08781858067371251, 0.010717120315616224, 0.13331170809566362, 0.43526376535005673, 0.34257740245262713, 0.10387181625518971, -0.457487491224275, -6.680571006242308E-4, -0.1467642764070457, -0.0827303926336802, -0.2564469723458104, 0.4539495613570844, -0.011235768403347612, -0.24564861810781868, -0.40501503320139265, -0.3826834809374662, -0.3377790967383011, 0.46902960181170494, 0.202441021227159, 0.003180041523581978, 0.0042185288047349445, 0.017141000687106667, -0.27250885701482386, 0.11031720233075437, 0.0216158842894153, -0.44401166167430695, -0.14624301582670252, 0.30467769485147767, -0.3050235405576981, -0.14090865495512395, 0.2860470542614215, -0.2975802284883532, 0.45745181550949676, 0.22830679200202775, -0.2626224741933654, 0.2677378844219306, 0.09247423588254344, -0.46823445867037294, 0.21909458584355812, -0.32370686317751607, -0.036381401955386306, 0.47361464792739905, 0.09091576938883827, 0.3632227325341041, 0.14722116693387266, -0.2896591431241333, 0.25055994590708697, -0.4258818627995149, 0.47681860812556653, -0.03150876381085066, 0.046736130334188, 0.16802611417785263, -0.27180209199332606, -0.11010430099834323, -0.015386113056051864, 0.3834403813355567, 0.17482358048518976, -0.06696486989090378, 0.05949897227832279, -0.2285837994818507, -0.47436394758568434, 0.2929880817856384, -0.39771028034993405, 0.024353911242090742, -0.17930913835984819, 0.4674280363366927, -0.15060882383371577, 0.4846616699688261, 0.20483528243449722, -0.20756817559688678, 0.06011556614338498, -0.29557836355331646, -0.37440439627334376, -6.001391424256264E-4, -0.10380089172449214, -0.45465214282990074, 0.408674451493902, -0.3968232365571538, -0.04908293538078756, -0.04226139019678321, 0.3529347431244376, -0.2784992192836101, -0.2306199404178132, -0.24221099039848293, 0.4564726447388764, -0.25280071974728835, 0.4369466369668391, 0.43454503923590104, -0.3636407623224901, 0.14708657221061405, -0.1707115885813394, 0.26094315311280036, -0.16314337339199192, -0.454690745627508, -0.08450431208355436, -0.24220560138343372, -0.26560912386735924, 0.16392383746752504, 0.08471303941450892, -0.13476450976494647, -0.15770897185687405, -0.36022020374398445, 0.3271460484059454, 0.01308374814363611, 0.19427967911859056, 0.21432088097214397, 0.24188172638126548, -0.35030315999460315, -0.05707284633662346, 0.30170602680313774, 0.2668167113618011 };

        double[] pesos2 = {
            -0.31164814160293,
            0.14775834684812184,
            0.4806908258042557,
            0.23008931220026885,
            -0.239176785469148,
            -0.2525729945919445,
            0.026999025935749654,
            0.30776229924333953,
            0.12975176414897083,
            0.2113499293280109,
            0.2054530564284348,
            -0.26089435805379435,
            -0.39543714523998363,
            -0.35158128875334427,
            -0.3250786556018088
        };

        this.pesosEntradaOculta = new double[25][15];
        
        int index = 0;
        for (int i = 0; i < 25; i++) {
            for (int j = 0; j < 15; j++) {
                this.pesosEntradaOculta[i][j] = pesos1[index++];
            }
        }

        this.pesosOcultaSaida = new double[15][1];

        index = 0;
        for (int i = 0; i < 15; i++) {
            for (int j = 0; j < 1; j++) {
                this.pesosOcultaSaida[i][j] = pesos2[index++];
            }
        }

    }

    private double sigmoid(double x) {
        return 1 / (1 + Math.exp(-x));
    }

    private double derivadaSigmoid(double x) {
        return x * (1 - x);
    }

    public double[] forward(double[] entradas) {
        double[] camadaOculta = new double[tamanhoOculto];
        double[] saida = new double[tamanhoSaida];

        for (int i = 0; i < tamanhoOculto; i++) {
            double soma = 0.0;
            for (int j = 0; j < tamanhoEntrada; j++) {
                soma += entradas[j] * pesosEntradaOculta[j][i];
            }
            camadaOculta[i] = sigmoid(soma);
        }

        for (int i = 0; i < tamanhoSaida; i++) {
            double soma = 0.0;
            for (int j = 0; j < tamanhoOculto; j++) {
                soma += camadaOculta[j] * pesosOcultaSaida[j][i];
            }
            saida[i] = sigmoid(soma);  // Sa√≠da entre 0 e 1
        }
        return saida;
    }

    public void treinar(double[] entradas, double[] saidaEsperada) {
        double[] camadaOculta = new double[tamanhoOculto];
        double[] saida = forward(entradas);

        // Erros da camada de sa√≠da
        double[] errosSaida = new double[tamanhoSaida];
        for (int i = 0; i < tamanhoSaida; i++) {
            errosSaida[i] = (saidaEsperada[i] - saida[i]) * derivadaSigmoid(saida[i]);
        }

        double[] errosOculta = new double[tamanhoOculto];
        for (int i = 0; i < tamanhoOculto; i++) {
            double erro = 0.0;
            for (int j = 0; j < tamanhoSaida; j++) {
                erro += errosSaida[j] * pesosOcultaSaida[i][j];
            }
            errosOculta[i] = erro * derivadaSigmoid(camadaOculta[i]);
        }

        // Atualiza√ß√£o dos pesos
        for (int i = 0; i < tamanhoOculto; i++) {
            for (int j = 0; j < tamanhoSaida; j++) {
                pesosOcultaSaida[i][j] += taxaAprendizagem * errosSaida[j] * camadaOculta[i];
            }
        }

        for (int i = 0; i < tamanhoEntrada; i++) {
            for (int j = 0; j < tamanhoOculto; j++) {
                pesosEntradaOculta[i][j] += taxaAprendizagem * errosOculta[j] * entradas[i];
            }
        }
    }

    /*public void treinar(double[] entradas, double[] saidaEsperada, double erroTolerado, int maxEpocas) {
    int epoca = 0;
    double erroTotal;
    do {
        erroTotal = 0.0;
        // Treinamento para uma amostra
        double[] camadaOculta = new double[tamanhoOculto];
        double[] saida = forward(entradas);

        // Calcula o erro da sa√≠da
        double[] errosSaida = new double[tamanhoSaida];
        for (int i = 0; i < tamanhoSaida; i++) {
            double erro = (saidaEsperada[i] - saida[i]);
            errosSaida[i] = erro * derivadaSigmoid(saida[i]);
            erroTotal += erro * erro; // Erro quadr√°tico
        }

        // Calcula o erro na camada oculta
        double[] errosOculta = new double[tamanhoOculto];
        for (int i = 0; i < tamanhoOculto; i++) {
            double erro = 0.0;
            for (int j = 0; j < tamanhoSaida; j++) {
                erro += errosSaida[j] * pesosOcultaSaida[i][j];
            }
            errosOculta[i] = erro * derivadaSigmoid(camadaOculta[i]);
        }

        // Atualiza os pesos entre a camada oculta e a de sa√≠da
        for (int i = 0; i < tamanhoOculto; i++) {
            for (int j = 0; j < tamanhoSaida; j++) {
                pesosOcultaSaida[i][j] += taxaAprendizagem * errosSaida[j] * camadaOculta[i];
            }
        }

        // Atualiza os pesos entre a camada de entrada e a camada oculta
        for (int i = 0; i < tamanhoEntrada; i++) {
            for (int j = 0; j < tamanhoOculto; j++) {
                pesosEntradaOculta[i][j] += taxaAprendizagem * errosOculta[j] * entradas[i];
            }
        }

        // Atualiza o erro total e conta a √©poca
        erroTotal /= tamanhoSaida; // M√©dia do erro quadr√°tico
        epoca++;
    } while (erroTotal > erroTolerado && epoca < maxEpocas);

    System.out.println("Treinamento finalizado ap√≥s " + epoca + " √©pocas com erro total: " + erroTotal);
}
 */
}
